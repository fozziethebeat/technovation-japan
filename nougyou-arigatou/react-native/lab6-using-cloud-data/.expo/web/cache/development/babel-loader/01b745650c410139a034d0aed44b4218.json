{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport Airtable from 'airtable';\nimport commentReducer from \"./commentSlice\";\nimport { init as commentInit } from \"./farmerSlice\";\nimport farmerReducer from \"./farmerSlice\";\nimport { init as farmerInit } from \"./farmerSlice\";\nvar preloadedState = {\n  farmer: [],\n  comment: []\n};\nvar store = configureStore({\n  reducer: {\n    farmer: farmerReducer,\n    comment: commentReducer\n  },\n  preloadedState: preloadedState\n});\nvar table = new Airtable({\n  apiKey: process && process.env && process.env.AIRTABLE_API_KEY || \"keyOIGxfs3sOz7peI\"\n});\nvar base = table.base('appwPdl5QXUtRh8Rz');\nbase('Table 1').select({}).eachPage(function page(records, fetchNextPage) {\n  records.map(function (r) {\n    return {\n      Name: r.get('Name'),\n      Image: {\n        uri: r.get('Image')[0].url\n      },\n      Username: r.get('Username'),\n      Location: r.get('Location'),\n      Favorites: r.get('Favorites').split(',').map(function (f) {\n        return f.trim();\n      })\n    };\n  }).forEach(function (r) {\n    return store.dispatch(farmerInit(r));\n  });\n  fetchNextPage();\n}, function done(err) {\n  console.log(err);\n});\nbase('Comments').select({}).eachPage(function page(records, fetchNextPage) {\n  records.map(function (r) {\n    return {\n      Username: r.get('Farmer'),\n      Content: r.get('Comments'),\n      Key: r.get('uuid')\n    };\n  }).forEach(function (r) {\n    return store.dispatch(commentInit(r));\n  });\n  fetchNextPage();\n}, function done(err) {});\nexport default store;","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/Store.tsx"],"names":["configureStore","Airtable","commentReducer","init","commentInit","farmerReducer","farmerInit","preloadedState","farmer","comment","store","reducer","table","apiKey","base","select","eachPage","page","records","fetchNextPage","map","r","Name","get","Image","uri","url","Username","Location","Favorites","split","f","trim","forEach","dispatch","done","err","console","log","Content","Key"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAGA,OAAOC,cAAP;AACA,SAASC,IAAI,IAAIC,WAAjB;AACA,OAAOC,aAAP;AACA,SAASF,IAAI,IAAIG,UAAjB;AAEA,IAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,EADa;AAErBC,EAAAA,OAAO,EAAE;AAFY,CAAvB;AAKA,IAAMC,KAAK,GAAGV,cAAc,CAAC;AAC3BW,EAAAA,OAAO,EAAE;AACPH,IAAAA,MAAM,EAAEH,aADD;AAEPI,IAAAA,OAAO,EAAEP;AAFF,GADkB;AAK3BK,EAAAA,cAAc,EAAdA;AAL2B,CAAD,CAA5B;AASA,IAAMK,KAAK,GAAI,IAAIX,QAAJ,CAAa;AAACY,EAAAA,MAAM;AAAP,CAAb,CAAf;AACA,IAAMC,IAAI,GAAGF,KAAK,CAACE,IAAN,CAAW,mBAAX,CAAb;AACAA,IAAI,CAAC,SAAD,CAAJ,CAAgBC,MAAhB,CAAuB,EAAvB,EAA2BC,QAA3B,CACE,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACpCD,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAAC,CAAC,EAAI;AACf,WAAO;AACPC,MAAAA,IAAI,EAAED,CAAC,CAACE,GAAF,CAAM,MAAN,CADC;AAEPC,MAAAA,KAAK,EAAE;AAACC,QAAAA,GAAG,EAAEJ,CAAC,CAACE,GAAF,CAAM,OAAN,EAAe,CAAf,EAAkBG;AAAxB,OAFA;AAGPC,MAAAA,QAAQ,EAAEN,CAAC,CAACE,GAAF,CAAM,UAAN,CAHH;AAIPK,MAAAA,QAAQ,EAAEP,CAAC,CAACE,GAAF,CAAM,UAAN,CAJH;AAKPM,MAAAA,SAAS,EAAER,CAAC,CAACE,GAAF,CAAM,WAAN,EAAmBO,KAAnB,CAAyB,GAAzB,EAA8BV,GAA9B,CAAkC,UAAAW,CAAC;AAAA,eAAIA,CAAC,CAACC,IAAF,EAAJ;AAAA,OAAnC;AALJ,KAAP;AAOD,GARD,EASGC,OATH,CASW,UAAAZ,CAAC;AAAA,WAAIX,KAAK,CAACwB,QAAN,CAAe5B,UAAU,CAACe,CAAD,CAAzB,CAAJ;AAAA,GATZ;AAUAF,EAAAA,aAAa;AACd,CAbH,EAcE,SAASgB,IAAT,CAAcC,GAAd,EAAmB;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,CAhBH;AAkBAtB,IAAI,CAAC,UAAD,CAAJ,CAAiBC,MAAjB,CAAwB,EAAxB,EAA4BC,QAA5B,CACE,SAASC,IAAT,CAAcC,OAAd,EAAuBC,aAAvB,EAAsC;AACpCD,EAAAA,OAAO,CAACE,GAAR,CAAY,UAAAC,CAAC,EAAI;AACf,WAAO;AACPM,MAAAA,QAAQ,EAAEN,CAAC,CAACE,GAAF,CAAM,QAAN,CADH;AAEPgB,MAAAA,OAAO,EAAElB,CAAC,CAACE,GAAF,CAAM,UAAN,CAFF;AAGPiB,MAAAA,GAAG,EAAEnB,CAAC,CAACE,GAAF,CAAM,MAAN;AAHE,KAAP;AAKD,GAND,EAOGU,OAPH,CAOW,UAAAZ,CAAC;AAAA,WAAIX,KAAK,CAACwB,QAAN,CAAe9B,WAAW,CAACiB,CAAD,CAA1B,CAAJ;AAAA,GAPZ;AAQAF,EAAAA,aAAa;AACd,CAXH,EAYE,SAASgB,IAAT,CAAcC,GAAd,EAAmB,CAClB,CAbH;AAeA,eAAe1B,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport Airtable from 'airtable';\n\nimport Images from './assets/Images';\nimport commentReducer from './commentSlice';\nimport { init as commentInit } from './farmerSlice';\nimport farmerReducer from './farmerSlice';\nimport { init as farmerInit } from './farmerSlice';\n\nconst preloadedState = {\n  farmer: [],\n  comment: []\n};\n\nconst store = configureStore({\n  reducer: {\n    farmer: farmerReducer,\n    comment: commentReducer,\n  },\n  preloadedState\n});\n\n// Read the initial set of farmers from Airtable.\nconst table =  new Airtable({apiKey : process.env.AIRTABLE_API_KEY})\nconst base = table.base('appwPdl5QXUtRh8Rz');\nbase('Table 1').select({}).eachPage(\n  function page(records, fetchNextPage) {\n    records.map(r => {\n      return {\n      Name: r.get('Name'),\n      Image: {uri: r.get('Image')[0].url},\n      Username: r.get('Username'),\n      Location: r.get('Location'),\n      Favorites: r.get('Favorites').split(',').map(f => f.trim()),\n    };\n    })\n      .forEach(r => store.dispatch(farmerInit(r)));\n    fetchNextPage();\n  },\n  function done(err) {\n    console.log(err);\n  });\n\nbase('Comments').select({}).eachPage(\n  function page(records, fetchNextPage) {\n    records.map(r => {\n      return {\n      Username: r.get('Farmer'),\n      Content: r.get('Comments'),\n      Key: r.get('uuid'),\n    };\n    })\n      .forEach(r => store.dispatch(commentInit(r)));\n    fetchNextPage();\n  },\n  function done(err) {\n  });\n\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}