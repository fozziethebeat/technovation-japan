{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createSlice } from '@reduxjs/toolkit';\nvar initialState = [];\nexport var farmerSlice = createSlice({\n  name: 'farmer',\n  initialState: initialState,\n  reducers: {\n    init: function init(state, farmer) {\n      state.push(farmer.payload);\n    },\n    append: function append(state, content) {\n      var farmer = content.payload;\n      state.push(farmer);\n      base('Table 1').create([{\n        \"fields\": {\n          \"Name\": farmer.Name,\n          \"Favorites\": farmer.Favorites.join(','),\n          \"Location\": comment.Location,\n          \"Username\": comment.Username\n        }\n      }], function (err, records) {});\n    },\n    update: function update(state, username, farmer) {\n      for (var i = 0; i < state.length; ++i) {\n        if (state[i].Username == username) {\n          state[i] = _objectSpread(_objectSpread({}, farmer), state[i]);\n        }\n      }\n    }\n  }\n});\nvar _farmerSlice$actions = farmerSlice.actions,\n    init = _farmerSlice$actions.init,\n    append = _farmerSlice$actions.append,\n    update = _farmerSlice$actions.update;\nexport { init, append, update };\nexport default farmerSlice.reducer;","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/farmerSlice.ts"],"names":["createSlice","initialState","farmerSlice","name","reducers","init","state","farmer","push","payload","append","content","base","create","Name","Favorites","join","comment","Location","Username","err","records","update","username","i","length","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAKA,IAAMC,YAA2B,GAAG,EAApC;AAEA,OAAO,IAAMC,WAAW,GAAGF,WAAW,CAAC;AACrCG,EAAAA,IAAI,EAAE,QAD+B;AAErCF,EAAAA,YAAY,EAAZA,YAFqC;AAGrCG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,cAACC,KAAD,EAAQC,MAAR,EAAmB;AACvBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACD,KAHO;AAIRC,IAAAA,MAAM,EAAE,gBAACJ,KAAD,EAAQK,OAAR,EAAoB;AAC1B,UAAMJ,MAAM,GAAGI,OAAO,CAACF,OAAvB;AACAH,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAX;AACAK,MAAAA,IAAI,CAAC,SAAD,CAAJ,CAAgBC,MAAhB,CAAuB,CACrB;AACE,kBAAU;AACR,kBAAQN,MAAM,CAACO,IADP;AAER,uBAAaP,MAAM,CAACQ,SAAP,CAAiBC,IAAjB,CAAsB,GAAtB,CAFL;AAGR,sBAAYC,OAAO,CAACC,QAHZ;AAIR,sBAAYD,OAAO,CAACE;AAJZ;AADZ,OADqB,CAAvB,EASE,UAASC,GAAT,EAAcC,OAAd,EAAuB,CACtB,CAVH;AAWD,KAlBO;AAmBRC,IAAAA,MAAM,EAAE,gBAAChB,KAAD,EAAQiB,QAAR,EAAkBhB,MAAlB,EAA6B;AACnC,WAAK,IAAIiB,CAAC,GAAE,CAAZ,EAAeA,CAAC,GAAGlB,KAAK,CAACmB,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,YAAIlB,KAAK,CAACkB,CAAD,CAAL,CAASL,QAAT,IAAqBI,QAAzB,EAAmC;AACjCjB,UAAAA,KAAK,CAACkB,CAAD,CAAL,mCACKjB,MADL,GAEKD,KAAK,CAACkB,CAAD,CAFV;AAID;AACF;AACF;AA5BO;AAH2B,CAAD,CAA/B;AAmCA,2BAAiCtB,WAAW,CAACwB,OAA7C;AAAA,IAAQrB,IAAR,wBAAQA,IAAR;AAAA,IAAcK,MAAd,wBAAcA,MAAd;AAAA,IAAsBY,MAAtB,wBAAsBA,MAAtB;;AAEP,eAAepB,WAAW,CAACyB,OAA3B","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport type { RootState } from '../../app/store'\n\nimport type { Farmer } from './types';\n\nconst initialState: Array<Farmer> = [];\n\nexport const farmerSlice = createSlice({\n  name: 'farmer',\n  initialState,\n  reducers: {\n    init: (state, farmer) => {\n      state.push(farmer.payload);\n    },\n    append: (state, content) => {\n      const farmer = content.payload;\n      state.push(farmer);\n      base('Table 1').create([\n        {\n          \"fields\": {\n            \"Name\": farmer.Name,\n            \"Favorites\": farmer.Favorites.join(','),\n            \"Location\": comment.Location,\n            \"Username\": comment.Username\n          }\n        }],\n        function(err, records) {\n        });\n    },\n    update: (state, username, farmer) => {\n      for (var i =0; i < state.length; ++i) {\n        if (state[i].Username == username) {\n          state[i] = {\n            ...farmer,\n            ...state[i],\n          }\n        }\n      }\n    },\n  },\n});\n\nexport const { init, append, update } = farmerSlice.actions;\n\nexport default farmerSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}