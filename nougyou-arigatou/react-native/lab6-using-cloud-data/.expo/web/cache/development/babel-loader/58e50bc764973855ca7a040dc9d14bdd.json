{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Text = Text;\nexports.View = View;\nexports.useThemeColor = useThemeColor;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _Text = _interopRequireDefault(require(\"react-native-web/dist/exports/Text\"));\n\nvar _View = _interopRequireDefault(require(\"react-native-web/dist/exports/View\"));\n\nvar _Colors = _interopRequireDefault(require(\"../constants/Colors\"));\n\nvar _useColorScheme = _interopRequireDefault(require(\"../hooks/useColorScheme\"));\n\nvar _jsxFileName = \"/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/components/Themed.tsx\";\nvar _excluded = [\"style\", \"lightColor\", \"darkColor\"],\n    _excluded2 = [\"style\", \"lightColor\", \"darkColor\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction useThemeColor(props, colorName) {\n  var theme = (0, _useColorScheme.default)();\n  var colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return _Colors.default[theme][colorName];\n  }\n}\n\nfunction Text(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded);\n  var color = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'text');\n  return React.createElement(_Text.default, (0, _extends2.default)({\n    style: [{\n      color: color\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 10\n    }\n  }));\n}\n\nfunction View(props) {\n  var style = props.style,\n      lightColor = props.lightColor,\n      darkColor = props.darkColor,\n      otherProps = (0, _objectWithoutProperties2.default)(props, _excluded2);\n  var backgroundColor = useThemeColor({\n    light: lightColor,\n    dark: darkColor\n  }, 'background');\n  return React.createElement(_View.default, (0, _extends2.default)({\n    style: [{\n      backgroundColor: backgroundColor\n    }, style]\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 10\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/components/Themed.tsx"],"names":["useThemeColor","props","colorName","theme","colorFromProps","Colors","Text","style","lightColor","darkColor","otherProps","color","light","dark","View","backgroundColor"],"mappings":";;;;;;;;;;;;;AAKA;;;;;;AAGA;;AACA;;;;;;;;;;AAEO,SAASA,aAAT,CACLC,KADK,EAELC,SAFK,EAGL;AACA,MAAMC,KAAK,GAAG,8BAAd;AACA,MAAMC,cAAc,GAAGH,KAAK,CAACE,KAAD,CAA5B;;AAEA,MAAIC,cAAJ,EAAoB;AAClB,WAAOA,cAAP;AACD,GAFD,MAEO;AACL,WAAOC,gBAAOF,KAAP,EAAcD,SAAd,CAAP;AACD;AACF;;AAUM,SAASI,IAAT,CAAcL,KAAd,EAAgC;AACrC,MAAQM,KAAR,GAAwDN,KAAxD,CAAQM,KAAR;AAAA,MAAeC,UAAf,GAAwDP,KAAxD,CAAeO,UAAf;AAAA,MAA2BC,SAA3B,GAAwDR,KAAxD,CAA2BQ,SAA3B;AAAA,MAAyCC,UAAzC,0CAAwDT,KAAxD;AACA,MAAMU,KAAK,GAAGX,aAAa,CAAC;AAAEY,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,MAAzC,CAA3B;AAEA,SAAO,oBAAC,aAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAALA;AAAF,KAAD,EAAYJ,KAAZ;AAApB,KAA4CG,UAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;;AAEM,SAASI,IAAT,CAAcb,KAAd,EAAgC;AACrC,MAAQM,KAAR,GAAwDN,KAAxD,CAAQM,KAAR;AAAA,MAAeC,UAAf,GAAwDP,KAAxD,CAAeO,UAAf;AAAA,MAA2BC,SAA3B,GAAwDR,KAAxD,CAA2BQ,SAA3B;AAAA,MAAyCC,UAAzC,0CAAwDT,KAAxD;AACA,MAAMc,eAAe,GAAGf,aAAa,CAAC;AAAEY,IAAAA,KAAK,EAAEJ,UAAT;AAAqBK,IAAAA,IAAI,EAAEJ;AAA3B,GAAD,EAAyC,YAAzC,CAArC;AAEA,SAAO,oBAAC,aAAD;AAAa,IAAA,KAAK,EAAE,CAAC;AAAEM,MAAAA,eAAe,EAAfA;AAAF,KAAD,EAAsBR,KAAtB;AAApB,KAAsDG,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD","sourcesContent":["/**\n * Learn more about Light and Dark modes:\n * https://docs.expo.io/guides/color-schemes/\n */\n\nimport * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n"]},"metadata":{},"sourceType":"script"}