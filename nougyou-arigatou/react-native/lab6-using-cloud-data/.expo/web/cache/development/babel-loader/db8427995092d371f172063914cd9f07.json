{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { append } from \"../farmerSlice\";\nimport { Text, View } from \"../components/Themed\";\nexport default function FarmerProfileScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var dispatch = useDispatch();\n\n  var _useState = useState({\n    Name: '',\n    Image: '',\n    Username: '',\n    Location: '',\n    Favorites: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      farmer = _useState2[0],\n      setFarmer = _useState2[1];\n\n  var onImagePress = function onImagePress() {\n    var result;\n    return _regeneratorRuntime.async(function onImagePress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All\n            }));\n\n          case 2:\n            result = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.row\n  }, React.createElement(View, {\n    style: styles.column\n  }, React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Username: \"), React.createElement(TextInput, {\n    placeholder: \"new username\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Username: text\n      }));\n    },\n    defaultValue: \"\"\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Name: \"), React.createElement(TextInput, {\n    placeholder: \"new name\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Name: text\n      }));\n    },\n    defaultValue: farmer.Name\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Location: \"), React.createElement(TextInput, {\n    placeholder: \"new location\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Location: text\n      }));\n    },\n    defaultValue: farmer.Location\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Favorites: \"), React.createElement(TextInput, {\n    placeholder: \"new favorites\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Favorites: text.split(',').map(function (t) {\n          return t.trim();\n        })\n      }));\n    },\n    defaultValue: farmer.Favorites\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Button, {\n    onPress: onImagePress,\n    title: \"Pick a photo\"\n  })))), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      dispatch(append(farmer));\n      navigation.navigate(\"Farmer Profile\", {\n        farmer: farmer.Username\n      });\n    },\n    title: \"Save\"\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 4\n  },\n  image: {\n    padding: 10,\n    height: 300,\n    width: 300\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  column: {\n    flexDirection: 'column'\n  },\n  row: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/screens/NewFarmerScreen.tsx"],"names":["React","useState","useDispatch","ImagePicker","append","Text","View","FarmerProfileScreen","navigation","route","dispatch","Name","Image","Username","Location","Favorites","farmer","setFarmer","onImagePress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","result","styles","container","row","column","text","split","map","t","trim","navigate","StyleSheet","create","flex","alignItems","justifyContent","padding","image","height","width","title","fontSize","fontWeight","separator","marginVertical","flexDirection"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, Image, StyleSheet, TextInput } from 'react-native';\nimport { useNavigation } from '@react-navigation/native';\nimport * as ImagePicker from 'expo-image-picker';\n\nimport { append } from '../farmerSlice';\nimport { Text, View } from '../components/Themed';\n\nexport default function FarmerProfileScreen({ navigation, route }) {\n  const dispatch = useDispatch();\n  const [farmer, setFarmer] = useState({\n    Name: '',\n    Image: '',\n    Username: '',\n    Location: '', \n    Favorites: [ ],\n  });\n\n  const onImagePress = async() => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <View style={styles.column}>\n          <View style={styles.row}>\n            <Text>Username: </Text>\n            <TextInput\n              placeholder=\"new username\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Username: text\n              })}\n              defaultValue=''\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Name: </Text>\n            <TextInput\n              placeholder=\"new name\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Name: text\n              })}\n              defaultValue={farmer.Name}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Location: </Text>\n            <TextInput\n              placeholder=\"new location\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Location: text\n              })}\n              defaultValue={farmer.Location}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Favorites: </Text>\n            <TextInput\n              placeholder=\"new favorites\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Favorites: text.split(',').map(t => t.trim())\n              })}\n              defaultValue={farmer.Favorites}\n            />\n          </View>\n          <View style={styles.row}>\n            <Button\n              onPress={onImagePress}\n              title=\"Pick a photo\"\n            />\n          </View>\n\n        </View>\n      </View>\n\n      <View style={styles.row}>\n        <Button\n          onPress={() => { \n            dispatch(append(farmer));\n            navigation.navigate(\"Farmer Profile\", { farmer: farmer.Username });\n          }}\n          title=\"Save\"\n        />\n      </View>\n     </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 4,\n  },\n  image: {\n    padding: 10,\n    height: 300,\n    width: 300,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  column: {\n    flexDirection: 'column',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}