{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport Airtable from 'airtable';\nimport Images from \"./assets/Images\";\nimport commentReducer from \"./commentSlice\";\nimport farmerReducer from \"./farmerSlice\";\nimport { init } from \"./farmerSlice\";\nvar preloadedState = {\n  farmer: [{\n    Name: 'Yuki Sano',\n    Image: Images.Farmer1,\n    Username: 'yusano',\n    Location: 'Nagano',\n    Favorites: ['cabbage', 'spinach']\n  }, {\n    Name: 'Yuichiro Watanabe',\n    Image: Images.Farmer2,\n    Username: 'yuichinabe',\n    Location: 'Niigata',\n    Favorites: ['rice', 'pumpkin']\n  }, {\n    Name: 'Megumi Yamada',\n    Image: Images.Farmer3,\n    Username: 'watermelon',\n    Location: 'Yamagata',\n    Favorites: ['garlic', 'onion']\n  }],\n  comment: [{\n    Username: 'yusano',\n    Content: 'Best potatoes Ever',\n    key: '001'\n  }, {\n    Username: 'yuichinabe',\n    Content: 'Let me pick berries',\n    key: '002'\n  }, {\n    Username: 'yuichinabe',\n    Content: 'Tells great jokes',\n    key: '003'\n  }]\n};\nvar store = configureStore({\n  reducer: {\n    farmer: farmerReducer,\n    comment: commentReducer\n  },\n  preloadedState: preloadedState\n});\nvar base = new Airtable({\n  apiKey: process && process.env && process.env.AIRTABLE_API_KEY || \"keyOIGxfs3sOz7peI\"\n}).base('appwPdl5QXUtRh8Rz');\nbase('Table 1').select({}).eachPage(function page(records, fetchNextPage) {\n  records.map(function (r) {\n    return {\n      Name: r.get('Name'),\n      Image: r.get('Image'),\n      Username: r.get('Username'),\n      Location: r.get('Location'),\n      Favorites: r.get('Favorites').split(',').map(function (f) {\n        return f.trim();\n      })\n    };\n  }).forEach(function (r) {\n    return store.dispatch(init(r));\n  });\n  fetchNextPage();\n}, function done(err) {\n  console.log(err);\n});\nexport default store;","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/Store.tsx"],"names":["configureStore","Airtable","Images","commentReducer","farmerReducer","init","preloadedState","farmer","Name","Image","Farmer1","Username","Location","Favorites","Farmer2","Farmer3","comment","Content","key","store","reducer","base","apiKey","select","eachPage","page","records","fetchNextPage","map","r","get","split","f","trim","forEach","dispatch","done","err","console","log"],"mappings":"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","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport Airtable from 'airtable';\n\nimport Images from './assets/Images';\nimport commentReducer from './commentSlice';\nimport farmerReducer from './farmerSlice';\nimport { init } from './farmerSlice';\n\nconst preloadedState = {\n  farmer: [\n    {\n      Name: 'Yuki Sano',\n      Image: Images.Farmer1,\n      Username: 'yusano',\n      Location: 'Nagano', \n      Favorites: [ 'cabbage', 'spinach']\n    },\n    {\n      Name: 'Yuichiro Watanabe',\n      Image: Images.Farmer2,\n      Username: 'yuichinabe',\n      Location: 'Niigata',\n      Favorites: [ 'rice', 'pumpkin']\n    },\n    {\n      Name: 'Megumi Yamada',\n      Image: Images.Farmer3,\n      Username: 'watermelon',\n      Location: 'Yamagata',\n      Favorites: [ 'garlic', 'onion']\n    },\n  ],\n  comment: [\n    {Username: 'yusano', Content: 'Best potatoes Ever', key: '001'},\n    {Username: 'yuichinabe', Content: 'Let me pick berries', key: '002'},\n    {Username: 'yuichinabe', Content: 'Tells great jokes', key: '003'},\n  ]\n};\n\nconst store = configureStore({\n  reducer: {\n    farmer: farmerReducer,\n    comment: commentReducer,\n  },\n  preloadedState\n});\n\n// Connect to Airtable.\nconst base = new Airtable({apiKey : process.env.AIRTABLE_API_KEY})\n  .base('appwPdl5QXUtRh8Rz');\nbase('Table 1').select({}).eachPage(\n  function page(records, fetchNextPage) {\n    records.map(r => {\n      return {\n      Name: r.get('Name'),\n      Image: r.get('Image'),\n      Username: r.get('Username'),\n      Location: r.get('Location'),\n      Favorites: r.get('Favorites').split(',').map(f => f.trim()),\n    };\n    })\n      .forEach(r => store.dispatch(init(r)));\n    fetchNextPage();\n  },\n  function done(err) {\n    console.log(err);\n  });\n  \n\nexport default store;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]},"metadata":{},"sourceType":"module"}