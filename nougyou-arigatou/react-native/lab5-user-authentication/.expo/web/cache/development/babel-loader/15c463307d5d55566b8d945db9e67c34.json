{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { getDownloadURL, getStorage, ref, uploadBytes } from 'firebase/storage';\nimport React, { useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { useDispatch } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { auth } from \"../storage/firebase\";\nimport { append } from \"../farmerSlice\";\nimport { Text, View } from \"../components/Themed\";\n\nfunction uploadImageAsync(uri) {\n  var blob, fileRef, result;\n  return _regeneratorRuntime.async(function uploadImageAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(new Promise(function (resolve, reject) {\n            var xhr = new XMLHttpRequest();\n\n            xhr.onload = function () {\n              resolve(xhr.response);\n            };\n\n            xhr.onerror = function (e) {\n              console.log(e);\n              reject(new TypeError(\"Network request failed\"));\n            };\n\n            xhr.responseType = \"blob\";\n            xhr.open(\"GET\", uri, true);\n            xhr.send(null);\n          }));\n\n        case 2:\n          blob = _context.sent;\n          fileRef = ref(getStorage(), uuidv4());\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(uploadBytes(fileRef, blob));\n\n        case 6:\n          result = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(getDownloadURL(fileRef));\n\n        case 9:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport default function FarmerProfileScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var user = auth.currentUser;\n  var dispatch = useDispatch();\n\n  var _useState = useState({\n    Name: '',\n    Image: '',\n    Username: '',\n    Location: '',\n    Favorites: [],\n    Email: user.providerInfo[0].email\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      farmer = _useState2[0],\n      setFarmer = _useState2[1];\n\n  var onImagePress = function onImagePress() {\n    var result, farmerImageUrl;\n    return _regeneratorRuntime.async(function onImagePress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All\n            }));\n\n          case 2:\n            result = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(uploadImageAsync(result.uri));\n\n          case 5:\n            farmerImageUrl = _context2.sent;\n            setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n              Image: farmerImageUrl\n            }));\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.row\n  }, React.createElement(View, {\n    style: styles.column\n  }, React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Email: \"), React.createElement(Text, null, user.providerData[0].email)), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Username: \"), React.createElement(TextInput, {\n    placeholder: \"new username\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Username: text\n      }));\n    },\n    defaultValue: \"\"\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Name: \"), React.createElement(TextInput, {\n    placeholder: \"new name\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Name: text\n      }));\n    },\n    defaultValue: farmer.Name\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Location: \"), React.createElement(TextInput, {\n    placeholder: \"new location\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Location: text\n      }));\n    },\n    defaultValue: farmer.Location\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Text, null, \"Favorites: \"), React.createElement(TextInput, {\n    placeholder: \"new favorites\",\n    onChangeText: function onChangeText(text) {\n      return setFarmer(_objectSpread(_objectSpread({}, farmer), {}, {\n        Favorites: text.split(',').map(function (t) {\n          return t.trim();\n        })\n      }));\n    },\n    defaultValue: farmer.Favorites\n  })), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Button, {\n    onPress: onImagePress,\n    title: \"Pick a photo\"\n  })))), React.createElement(View, {\n    style: styles.row\n  }, React.createElement(Button, {\n    onPress: function onPress() {\n      dispatch(append(farmer));\n      navigation.navigate(\"Farmer Profile\", {\n        farmer: farmer.Username\n      });\n    },\n    title: \"Save\"\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 4\n  },\n  image: {\n    padding: 10,\n    height: 300,\n    width: 300\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  column: {\n    flexDirection: 'column'\n  },\n  row: {\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["/Users/fozziethebeat/devel/technovation-japan/nougyou-arigatou/react-native/final-version/screens/NewFarmerScreen.tsx"],"names":["ImagePicker","getDownloadURL","getStorage","ref","uploadBytes","React","useState","useDispatch","v4","uuidv4","auth","append","Text","View","uploadImageAsync","uri","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","console","log","TypeError","responseType","open","send","blob","fileRef","result","FarmerProfileScreen","navigation","route","user","currentUser","dispatch","Name","Image","Username","Location","Favorites","Email","providerInfo","email","farmer","setFarmer","onImagePress","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","farmerImageUrl","styles","container","row","column","providerData","text","split","map","t","trim","navigate","StyleSheet","create","flex","alignItems","justifyContent","padding","image","height","width","title","fontSize","fontWeight","separator","marginVertical","flexDirection"],"mappings":"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","sourcesContent":["import * as ImagePicker from 'expo-image-picker';\nimport { getDownloadURL, getStorage, ref, uploadBytes } from 'firebase/storage';\nimport React, { useState } from 'react';\nimport { Button, Image, StyleSheet, TextInput } from 'react-native';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useNavigation } from '@react-navigation/native';\n\nimport { auth } from '../storage/firebase';\nimport { append } from '../farmerSlice';\nimport { Text, View } from '../components/Themed';\n\nasync function uploadImageAsync(uri) {\n  const blob = await new Promise( (resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function() {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function(e) {\n      console.log(e);\n      reject(new TypeError(\"Network request failed\"));\n    };\n    xhr.responseType = \"blob\";\n    xhr.open(\"GET\", uri, true);\n    xhr.send(null);\n  });\n\n  const fileRef = ref(getStorage(), uuidv4());\n  const result = await uploadBytes(fileRef, blob);\n  return await getDownloadURL(fileRef);\n}\n\nexport default function FarmerProfileScreen({ navigation, route }) {\n  const user = auth.currentUser;\n  const dispatch = useDispatch();\n  const [farmer, setFarmer] = useState({\n    Name: '',\n    Image: '',\n    Username: '',\n    Location: '', \n    Favorites: [ ],\n    Email: user.providerInfo[0].email,\n  });\n\n  const onImagePress = async() => {\n    let result = await ImagePicker.launchImageLibraryAsync({\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\n    });\n    const farmerImageUrl = await uploadImageAsync(result.uri);\n    // We first need to link this up with Firebase to save the file and then\n    // Airtable copies the image from Firebase.\n    setFarmer({\n      ...farmer,\n      Image: farmerImageUrl\n    })\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.row}>\n        <View style={styles.column}>\n          <View style={styles.row}>\n            <Text>Email: </Text>\n            <Text>{user.providerData[0].email}</Text>\n          </View>\n\n          <View style={styles.row}>\n            <Text>Username: </Text>\n            <TextInput\n              placeholder=\"new username\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Username: text\n              })}\n              defaultValue=''\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Name: </Text>\n            <TextInput\n              placeholder=\"new name\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Name: text\n              })}\n              defaultValue={farmer.Name}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Location: </Text>\n            <TextInput\n              placeholder=\"new location\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Location: text\n              })}\n              defaultValue={farmer.Location}\n            />\n          </View>\n\n          <View style={styles.row}>\n            <Text>Favorites: </Text>\n            <TextInput\n              placeholder=\"new favorites\"\n              onChangeText={text => setFarmer({\n                ...farmer,\n                Favorites: text.split(',').map(t => t.trim())\n              })}\n              defaultValue={farmer.Favorites}\n            />\n          </View>\n          <View style={styles.row}>\n            <Button\n              onPress={onImagePress}\n              title=\"Pick a photo\"\n            />\n          </View>\n\n        </View>\n      </View>\n\n      <View style={styles.row}>\n        <Button\n          onPress={() => { \n            dispatch(append(farmer));\n            navigation.navigate(\"Farmer Profile\", { farmer: farmer.Username });\n          }}\n          title=\"Save\"\n        />\n      </View>\n     </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 4,\n  },\n  image: {\n    padding: 10,\n    height: 300,\n    width: 300,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  column: {\n    flexDirection: 'column',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n});\n\n"]},"metadata":{},"sourceType":"module"}